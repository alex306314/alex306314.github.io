I")2<blockquote>
  <p>原文：<a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">Controlled and uncontrolled form inputs in React don’t have to be complicated</a></p>
</blockquote>

<p>可能经常看到文章会讲一个很矛盾的观点一边说着“不要使用<code class="language-plaintext highlighter-rouge">setState</code>”, 而另一边内容里又大斯宣讲“<code class="language-plaintext highlighter-rouge">ref</code>s 的不好”。这就有点难以理解了，那到底有没有选择标准。</p>

<p>你是如何处理表单的呢？</p>

<p>毕竟，表单在很多WEB应用里是主要功能。当然表单处理在 React 中或多或少也属于核心功能。</p>

<p>不用害怕。接下来我们看看他们之间的区别，以及应该在什么场合使用它们。</p>

<h2 id="非受控组件">非受控组件</h2>

<p>非受控表单组件如同传统的HTML表单输入框：</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Form</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">(){</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span><span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>DOM节点保存你输入的信息，然后你可以通过 <code class="language-plaintext highlighter-rouge">ref</code> 获取它们的值。如下：</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Form</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">handleSubmitClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">input</span><span class="o">=&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="o">=</span><span class="nx">input</span><span class="si">}</span><span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmitClick</span><span class="si">}</span><span class="p">&gt;</span>Sign up<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>也就是说，你必须在需要的时候从控件中“提取”值。提交表单时就需要这样操作。</p>

<p>这是实现表单输入的最简单的方法，一般会在学习React时这么写。</p>

<p>这个功能确实不够强大，接下来再看看受控组件。</p>

<h2 id="受控组件">受控组件</h2>

<p>受控组件使用属性接收它的当前值，以及一个回调函数修改该值。可以说这是一种更符合“React的方式”（并不不是说应该总是使用这种方式）。</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">input</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">someValue</span><span class="si">}</span> <span class="na">onChange</span><span class="p">=</span><span class="si">{</span><span class="nx">handleChange</span><span class="si">}</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>看起来很不错，但控件的值必须保存在 <code class="language-plaintext highlighter-rouge">state</code> 中。一般渲染表单的组件会把值保存在它的 <code class="language-plaintext highlighter-rouge">state</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Form</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(){</span>
        <span class="k">super</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">name</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
        <span class="p">};</span>
    <span class="p">}</span>
    <span class="nx">handleNameChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span>
                    <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">this.state.name</span><span class="dl">"</span>
                    <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNameChange</span><span class="p">}</span>
                <span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>当然，也可以保存在另一个组件的<code class="language-plaintext highlighter-rouge">state</code>中，或者分离出去，如使用 redux</p>
</blockquote>

<p>每次输入一个新的字符都会调用 <code class="language-plaintext highlighter-rouge">handleNameChange</code> 方法，它获取控件最新值并更新到 <code class="language-plaintext highlighter-rouge">state</code></p>

<p><br /></p>
<div style="background:white;padding:20px;">
<img src="/public/images/js/controlled-flow.png" />
</div>
<p><br /></p>

<ul>
  <li>从一个空字符串开始 —— <code class="language-plaintext highlighter-rouge">''</code></li>
  <li>当输入一个 <code class="language-plaintext highlighter-rouge">a</code> 然后 <code class="language-plaintext highlighter-rouge">handleNameChange</code> 获取到 <code class="language-plaintext highlighter-rouge">a</code> 并调用 <code class="language-plaintext highlighter-rouge">setState</code>。控件就会重新渲染显示出值 <code class="language-plaintext highlighter-rouge">a</code></li>
  <li>输入 <code class="language-plaintext highlighter-rouge">b</code> 时 <code class="language-plaintext highlighter-rouge">handleNameChange</code> 获取到值 <code class="language-plaintext highlighter-rouge">ab</code> 并更新到 <code class="language-plaintext highlighter-rouge">state</code>。控件又一次重新渲染，显示出 <code class="language-plaintext highlighter-rouge">value="ab"</code></li>
</ul>

<p>这种流程将值的更改“推送”到表单组件，因此表单组件始终具有控件的当前值，而不需要显式地请求它。</p>

<p>这意味着你的数据(state)和UI(inputs)总是同步的。state 将值提供给 input，而 input 要求表单更改当前值。</p>

<p>这也意味着表单组件可以立即响应控件修改，如：</p>

<ul>
  <li>就地反馈，如表单验证</li>
  <li>除非所有字段都有有效数据，否则禁用按钮</li>
  <li>强制执行特定的输入格式，比如信用卡号</li>
</ul>

<p>但如果不需要这些功能，并且认为非控组件更方便，那就按你的喜好好了。</p>

<h2 id="如何让一个表单元素受控呢">如何让一个表单元素受控呢？</h2>

<p>当然还有其它的表单元素如：checkbox、radio、select、textarea</p>

<p>如果你通过 <code class="language-plaintext highlighter-rouge">prop</code> 属性设置表单元素的值，它就变成了受控组件。就这么简单</p>

<p>每个表单元素值属性及事件略有不同如下：</p>

<table>
  <thead>
    <tr>
      <th>元素</th>
      <th>值属性</th>
      <th>change事件</th>
      <th>获取新值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>&lt;input type=”text”/&gt;</td>
      <td>value=”string”</td>
      <td>onChange</td>
      <td>event.target.value</td>
    </tr>
    <tr>
      <td>&lt;input type=”checkbox”/&gt;</td>
      <td>checked={boolean}</td>
      <td>onChange</td>
      <td>event.target.checked</td>
    </tr>
    <tr>
      <td>&lt;input type=”radio”/&gt;</td>
      <td>checked={boolean}</td>
      <td>onChange</td>
      <td>event.target.checked</td>
    </tr>
    <tr>
      <td>&lt;textarea /&gt;</td>
      <td>value=”string”</td>
      <td>onChange</td>
      <td>event.target.value</td>
    </tr>
    <tr>
      <td>&lt;select /&gt;</td>
      <td>value=”option value”</td>
      <td>onChange</td>
      <td>event.target.value</td>
    </tr>
  </tbody>
</table>

<h2 id="总结">总结</h2>

<p>受控和非受控组件各有优点。具体用哪一种要根据你的使用场景进行选择。</p>

<p>如果你的表单非常简单，如UI反馈，那么使用 <code class="language-plaintext highlighter-rouge">ref</code> 引用的非受控组件完全可以。没必要去听别人说什么“不好”。</p>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th>非受控组件</th>
      <th>受控组件</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>一次性的值获取（如表单提交时）</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>表单提交需要验证</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><a href="https://goshakkk.name/instant-form-fields-validation-react/">即时验证</a></td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td><a href="https://goshakkk.name/form-recipe-disable-submit-button-react/">有条件地禁用提交按钮</a></td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>强制输入格式</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>多个控件值组成一个数据</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>动态输入框</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<p>当然，这并不是一锤子买卖，你可以随时切换成受控组件。可以查看这个文章：<a href="https://goshakkk.name/turn-uncontrolled-into-controlled/">非受控组件改为受控组件并不难</a></p>

<p>最后更多关于React中表单的文章<a href="https://goshakkk.name/on-forms-react/">点击这里</a></p>
:ET