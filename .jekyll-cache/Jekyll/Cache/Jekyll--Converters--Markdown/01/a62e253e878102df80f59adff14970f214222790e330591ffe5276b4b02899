I"q<blockquote>
  <p><a href="https://medium.com/youngers-consulting/ngrx-tips-part-1-module-setup-with-lazy-loading-5dc8994b5a2d">原文链接：https://medium.com/youngers-consulting/ngrx-tips-part-1-module-setup-with-lazy-loading-5dc8994b5a2d</a></p>
</blockquote>

<ul>
  <li><a href="http://aqrun.com/blog/javascript/2018/03/17-NgRx技巧1-带延迟加载的模块配置.html">NgRx技巧 1-带延迟加载的模块配置</a></li>
  <li><a href="">NgRx技巧 2-选择器和测试</a></li>
  <li><a href="">NgRx技巧 3-操作 Actions</a></li>
</ul>

<p>如果您的Angular项目针对延迟加载进行了调整，并使用按需加载的独立模块进行加载，这些模块通过`StoreModule.forFeature(…) 定义了自己的 state 片段，您可以像这样定义根模块：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">StoreModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">({}</span> <span class="k">as</span> <span class="kr">any</span><span class="p">,</span> <span class="p">{</span> <span class="na">initialState</span><span class="p">:</span> <span class="nx">getInitialState</span> <span class="p">})</span>
</code></pre></div></div>

<p>但是，在我们使用所有状态初始化应用程序时，我们不提供任何 reducer。 这种方法的问题是，如果 reducer 不可用，那么任何尚未加载的功能将在操作分派时从状态中删除。</p>

<p>例如，假设我们的应用程序有一个“settings”区域和一个“Todos”区域，如果我们最初加载应用程序的“Todos”区域而不访问“settings”，该状态的一部分将在第一个操作分派时被移除，因为还没有可用的reducer来处理该功能的状态：</p>

<p><img src="http://aqrun.com/public/images/js/ngrxtipimg1.png" alt="settings removed" /></p>

<p>由于settings功能尚未加载，因此settings部分被删除。</p>

<p>防止这种情况的一种方法（不影响应用程序中的所有reducer）是，首先对所有功能设置一个默认reducer，该reducer只取得当前状态并返回：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ActionReducerMap</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@ngrx/store</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">settings</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./settings/settings.actions</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">todos</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./todos/todos.actions</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kr">interface</span> <span class="nx">ApplicationState</span> <span class="p">{</span>
    <span class="nl">settings</span><span class="p">:</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">SettingsState</span><span class="p">;</span>
    <span class="nl">todos</span><span class="p">:</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">TodosState</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">defaultReducer</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">T</span><span class="p">){</span> <span class="k">return</span> <span class="nx">state</span><span class="p">;</span> <span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">initailReducerMap</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">settings</span><span class="p">:</span> <span class="nx">defaultReducer</span><span class="p">,</span>
    <span class="na">todos</span><span class="p">:</span> <span class="nx">defaultReducer</span><span class="p">,</span>
<span class="p">}</span> <span class="k">as</span> <span class="nx">ActionReducerMap</span><span class="o">&lt;</span><span class="nx">ApplicationState</span><span class="o">&gt;</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">getInitailState</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">settings</span><span class="p">:</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">initialState</span><span class="p">,</span>
        <span class="na">todos</span><span class="p">:</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">initialState</span><span class="p">,</span>
    <span class="p">}</span> <span class="k">as</span> <span class="nx">ApplicationState</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后如下更新NgRx初始化：</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">StoreModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">(</span><span class="nx">initialReducerMap</span><span class="p">,</span> <span class="p">{</span> <span class="na">initialState</span><span class="p">:</span> <span class="nx">getInitialState</span> <span class="p">})</span>
</code></pre></div></div>

<p>随着您的功能模块被加载，它们将替换默认的 reducer。 在此之前，他们会在任何派发的操作上返回初始状态，以防止这些功能从状态移除：</p>

<p><img src="http://aqrun.com/public/images/js/ngrxtipimg2.png" alt="settings removed" /></p>

<p>“settings” 现在被保留</p>

<p>随着您的继续开发，如果添加新功能并更新了ApplicationState接口，它应该会导致编译错误，直到initialReducerMap更新。</p>

<p>然后，您的store选择器可以安全地假定功能状态部分将始终存在，而无需执行未定义(undefined)的检查。</p>

<p>在下一篇文章中，我将详细介绍选择器和测试。</p>
:ET